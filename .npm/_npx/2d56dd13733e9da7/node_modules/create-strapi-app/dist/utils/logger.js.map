{"version":3,"file":"logger.js","sources":["../../src/utils/logger.ts"],"sourcesContent":["import chalk from 'chalk';\nimport type { ChalkFunction } from 'chalk';\n\nconst MAX_PREFIX_LENGTH = 8;\n\nconst badge = (text: string, bgColor: ChalkFunction, textColor: ChalkFunction = chalk.black) => {\n  const wrappedText = ` ${text} `;\n\n  const repeat = Math.max(0, MAX_PREFIX_LENGTH - wrappedText.length);\n\n  return ' '.repeat(repeat) + bgColor(textColor(wrappedText));\n};\n\nconst textIndent = (\n  text: string | string[],\n  indentFirst = true,\n  indent: number = MAX_PREFIX_LENGTH + 2\n) => {\n  const parts = Array.isArray(text) ? text : [text];\n\n  return parts\n    .map((part, i) => {\n      if (i === 0 && !indentFirst) {\n        return part;\n      }\n\n      return ' '.repeat(indent) + part;\n    })\n    .join('\\n');\n};\n\nexport const logger = {\n  log(message: string | string[]): void {\n    console.log(textIndent(message));\n  },\n  title(title: string, message: string): void {\n    const prefix = badge(title, chalk.bgBlueBright);\n    console.log(`\\n${prefix}  ${message}`);\n  },\n  info(message: string): void {\n    console.log(`${' '.repeat(7)}${chalk.cyan('●')}  ${message}`);\n  },\n  success(message: string): void {\n    console.log(`\\n${' '.repeat(7)}${chalk.green('✓')}  ${chalk.green(message)}`);\n  },\n  fatal(message?: string | string[]): never {\n    const prefix = badge('Error', chalk.bgRed);\n\n    if (message) {\n      console.error(`\\n${prefix}  ${textIndent(message, false)}\\n`);\n    }\n\n    process.exit(1);\n  },\n  error(message: string | string[]): void {\n    const prefix = badge('Error', chalk.bgRed);\n    console.error(`\\n${prefix}  ${textIndent(message, false)}\\n`);\n  },\n  warn(message: string | string[]): void {\n    const prefix = badge('Warn', chalk.bgYellow);\n    console.warn(`\\n${prefix}  ${textIndent(message, false)}\\n`);\n  },\n};\n"],"names":["MAX_PREFIX_LENGTH","badge","text","bgColor","textColor","chalk","black","wrappedText","repeat","Math","max","length","textIndent","indentFirst","indent","parts","Array","isArray","map","part","i","join","logger","log","message","console","title","prefix","bgBlueBright","info","cyan","success","green","fatal","bgRed","error","process","exit","warn","bgYellow"],"mappings":"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"}